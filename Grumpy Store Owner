# There is a bookstore owner that has a store open for n minutes. 
# Every minute, some number of customers enter the store. 
# You are given an integer array customers of length n where customers[i] 
# is the number of the customer that enters the store at the start of the ith minute
# and all those customers leave after the end of that minute.
# On some minutes, the bookstore owner is grumpy. 

# You are given a binary array grumpy where grumpy[i] is 1
#  if the bookstore owner is grumpy during the ith minute, and is 0 otherwise.

# When the bookstore owner is grumpy, the customers of that minute are not satisfied
# otherwise, they are satisfied.
# The bookstore owner knows a secret technique to keep themselves
# not grumpy for minutes consecutive minutes, but can only use it once.

# Return the maximum number of customers that can be satisfied throughout the day.

class Solution:
    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:
        c = []
        # we know that if the owner is grumpy, the value will be equal to 0
        # hence if we multiply the number of customers at position i by grumpy[i]
        # we will know how many customers we are missing
        for i in range(len(customers)):
            c.append(customers[i]*grumpy[i])
        x = 0
        a = len(grumpy)
        max_ = 0
        sum_ = 0
        # find the number of customers that are missing
        while x < a - minutes+1:
            # if the sum of minutes customers from x to x + minutes is greater than the max value
            # we can set max to be that value
            if sum(c[x:x+minutes]) > max_:
                max_ = sum(c[x:x+minutes])
            x += 1
        # find the sum of the existing number of customers that get served
        for i in range(len(grumpy)):
            if grumpy[i] == 0:
                sum_ += customers[i]
        return sum_ + max_
